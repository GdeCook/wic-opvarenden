<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/home/gerhard/programming/python/wic-opvarenden/notebooks/wic-opvarenden.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2463"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainVoyages"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Deeds" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="300"/><column index="3" value="73"/><column index="4" value="83"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Locations" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="83"/><column index="2" value="171"/><column index="3" value="62"/><column index="4" value="245"/><column index="5" value="78"/><column index="6" value="74"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter><filter value="nij"/></global_filter></table><table schema="main" name="Persons" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="75"/><column index="2" value="265"/><column index="3" value="300"/><column index="4" value="59"/><column index="5" value="300"/><column index="6" value="300"/><column index="7" value="166"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Voyages" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="77"/><column index="2" value="160"/><column index="3" value="139"/><column index="4" value="117"/><column index="5" value="114"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="temp_location_data" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="171"/><column index="2" value="62"/><column index="3" value="86"/><column index="4" value="86"/><column index="5" value="146"/><column index="6" value="137"/><column index="7" value="87"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Top voyages">SELECT V.voyage_id, 
       V.ship_name || ' (' || V.organization || ', ' || strftime('%Y', V.last_deed_date) || ')' AS voyage,
       ROUND(SUM(T.final_debt_amount_int)) AS total_debt, 
       ROUND(AVG(T.final_debt_amount_int)) AS average_debt, 
       COUNT(T.deed_id) AS number_of_transactions,
       strftime('%Y', V.last_deed_date) AS voyage_year
       
FROM Voyages V
JOIN Transactions T ON V.voyage_id = T.voyage_id
GROUP BY V.voyage_id, V.ship_name, V.organization, voyage_year
ORDER BY total_debt DESC;
</sql><sql name="Top creditors">SELECT P.name AS creditor_name, SUM(T.final_debt_amount_int) AS total_amount_lent
FROM Transactions T
JOIN Persons P ON T.creditor_id = P.person_id
GROUP BY P.name
ORDER BY total_amount_lent DESC
;
</sql><sql name="Transactions per nationality per voyage">SELECT V.voyage_id, 
       V.ship_name || ' (' || V.organization || ', ' || strftime('%Y', V.last_deed_date) || ')' AS voyage,
       COUNT(CASE WHEN L.country = 'NL' THEN T.deed_id END) AS NL,
       COUNT(CASE WHEN L.country = 'DE' THEN T.deed_id END) AS DE,
       COUNT(CASE WHEN L.country = 'BE' THEN T.deed_id END) AS BE,
       COUNT(CASE WHEN L.country = 'GB' THEN T.deed_id END) AS GB,
       COUNT(CASE WHEN L.country = 'SE' THEN T.deed_id END) AS SE,
       COUNT(CASE WHEN L.country = 'NO' THEN T.deed_id END) AS NO,
       COUNT(CASE WHEN L.country = 'DK' THEN T.deed_id END) AS DK,
       COUNT(CASE WHEN L.country = 'FR' THEN T.deed_id END) AS FR,
	   COUNT(CASE WHEN L.country NOT IN ('NL', 'DE', 'BE', 'GB', 'SE', 'NO', 'DK', 'FR') AND L.country IS NOT NULL THEN T.deed_id END) AS other,
       COUNT(CASE WHEN L.country IS NULL OR S.location_standardized IS NULL THEN T.deed_id END) AS unknown,
       COUNT(T.deed_id) AS total
FROM Voyages V
JOIN Transactions T ON V.voyage_id = T.voyage_id
JOIN Persons S ON T.sailor_id = S.person_id
LEFT JOIN Locations L ON S.location_standardized = L.location_id
GROUP BY V.voyage_id, voyage
ORDER BY total DESC;
</sql><sql name="Total amount lent">SELECT L.country, 
       SUM(T.final_debt_amount_int) AS total_amount_lent, 
       COUNT(T.deed_id) AS number_of_loans,
       ROUND(AVG(T.final_debt_amount_int)) AS average_loan_amount
FROM Transactions T
JOIN Persons S ON T.sailor_id = S.person_id
JOIN Locations L ON S.location_standardized = L.location_id
WHERE S.role = 'sailor'
GROUP BY L.country
ORDER BY total_amount_lent DESC;
</sql><sql name="Transactions per nationality per creditor">SELECT P.name AS creditor_name, 
       COUNT(CASE WHEN L.country = 'NL' THEN T.deed_id END) AS NL,
       COUNT(CASE WHEN L.country = 'DE' THEN T.deed_id END) AS DE,
       COUNT(CASE WHEN L.country = 'BE' THEN T.deed_id END) AS BE,
       COUNT(CASE WHEN L.country = 'GB' THEN T.deed_id END) AS GB,
       COUNT(CASE WHEN L.country = 'SE' THEN T.deed_id END) AS SE,
       COUNT(CASE WHEN L.country = 'NO' THEN T.deed_id END) AS NO,
       COUNT(CASE WHEN L.country = 'DK' THEN T.deed_id END) AS DK,
       COUNT(CASE WHEN L.country = 'FR' THEN T.deed_id END) AS FR,
	          COUNT(CASE WHEN L.country NOT IN ('NL', 'DE', 'BE', 'GB', 'SE', 'NO', 'DK', 'FR') AND L.country IS NOT NULL THEN T.deed_id END) AS other,
       COUNT(CASE WHEN L.country IS NULL OR S.location_standardized IS NULL THEN T.deed_id END) AS unknown,
       COUNT(T.deed_id) AS total
FROM Transactions T
JOIN Persons P ON T.creditor_id = P.person_id
JOIN Persons S ON T.sailor_id = S.person_id
LEFT JOIN Locations L ON S.location_standardized = L.location_id
GROUP BY P.name
ORDER BY total DESC;
</sql><sql name="Transactions per role per creditor">SELECT 
    P.name AS creditor_name, 
    COUNT(CASE WHEN S.role = 'sailor' THEN T.deed_id END) AS sailor_transactions,
    COUNT(CASE WHEN S.role = 'soldier' THEN T.deed_id END) AS soldier_transactions,
    COUNT(CASE WHEN S.role IS NULL OR S.role NOT IN ('sailor', 'soldier') THEN T.deed_id END) AS unknown_transactions,
    COUNT(T.deed_id) AS total_transactions
FROM 
    Transactions T
JOIN 
    Persons P ON T.creditor_id = P.person_id
JOIN 
    Persons S ON T.sailor_id = S.person_id
GROUP BY 
    P.name
ORDER BY 
    total_transactions DESC;</sql><sql name="Top locations">SELECT 
    L.label AS location_name, 
    L.country, 
    L.latitude, 
    L.longitude, 
    COUNT(CASE WHEN P.role = 'soldier' THEN P.person_id END) AS number_of_soldiers,
    COUNT(CASE WHEN P.role = 'sailor' OR P.role IS NULL THEN P.person_id END) AS number_of_sailors,
    COUNT(CASE WHEN P.role IN ('soldier', 'sailor') OR P.role IS NULL THEN P.person_id END) AS total_count
FROM 
    Persons P
JOIN 
    Locations L ON P.location_standardized = L.location_id
WHERE 
    L.latitude IS NOT NULL 
    AND L.longitude IS NOT NULL
GROUP BY 
    L.location_id, L.label, L.country, L.latitude, L.longitude
ORDER BY 
    total_count DESC;</sql><sql name="Transactions per creditor per 5-year period">SELECT 
    P.name AS creditor_name, 
    COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1635' AND '1639' THEN T.deed_id END) AS &quot;1635-1639&quot;,
    COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1640' AND '1644' THEN T.deed_id END) AS &quot;1640-1644&quot;,
    COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1645' AND '1649' THEN T.deed_id END) AS &quot;1645-1649&quot;,
    COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1650' AND '1654' THEN T.deed_id END) AS &quot;1650-1654&quot;,
    COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1655' AND '1659' THEN T.deed_id END) AS &quot;1655-1659&quot;,
    COUNT(T.deed_id) AS total_transactions
FROM 
    Transactions T
JOIN 
    Persons P ON T.creditor_id = P.person_id
JOIN 
    Persons S ON T.sailor_id = S.person_id
JOIN 
    Deeds D ON T.deed_id = D.deed_id
GROUP BY 
    P.name
ORDER BY 
    total_transactions DESC;</sql><sql name="SQL 10">SELECT 
    L.label AS location_name, 
    L.country, 
    L.latitude, 
    L.longitude, 
    COUNT(CASE WHEN P.role = 'soldier' THEN P.person_id END) AS number_of_soldiers,
    COUNT(CASE WHEN P.role = 'sailor' OR P.role IS NULL THEN P.person_id END) AS number_of_sailors,
    COUNT(CASE WHEN P.role IN ('soldier', 'sailor') OR P.role IS NULL THEN P.person_id END) AS total_count
FROM 
    Persons P
JOIN 
    Locations L ON P.location_standardized = L.location_id
JOIN 
    Transactions T ON P.person_id = T.sailor_id  -- Assuming Transactions links persons to dates
JOIN 
    Deeds D ON T.deed_id = D.deed_id
WHERE 
    L.latitude IS NOT NULL 
    AND L.longitude IS NOT NULL
    AND strftime('%Y', D.deed_date) &lt; '1650'
GROUP BY 
    L.location_id, L.label, L.country, L.latitude, L.longitude
ORDER BY 
    total_count DESC;</sql><sql name="SQL 11">WITH TotalTransactions AS (
    SELECT 
        COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1635' AND '1649' THEN T.deed_id END) AS total_1635_1649,
        COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1650' AND '1664' THEN T.deed_id END) AS total_1650_1664
    FROM 
        Transactions T
    JOIN 
        Deeds D ON T.deed_id = D.deed_id
)

SELECT 
    L.country AS nationality, 
    ROUND(100.0 * COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1635' AND '1649' THEN T.deed_id END) / (SELECT total_1635_1649 FROM TotalTransactions), 2) AS &quot;1635-1649_Percentage&quot;,
    ROUND(100.0 * COUNT(CASE WHEN strftime('%Y', D.deed_date) BETWEEN '1650' AND '1664' THEN T.deed_id END) / (SELECT total_1650_1664 FROM TotalTransactions), 2) AS &quot;1650-1664_Percentage&quot;
FROM 
    Transactions T
JOIN 
    Persons S ON T.sailor_id = S.person_id
LEFT JOIN 
    Locations L ON S.location_standardized = L.location_id
JOIN 
    Deeds D ON T.deed_id = D.deed_id
GROUP BY 
    L.country
ORDER BY 
    &quot;1635-1649_Percentage&quot; DESC, 
    &quot;1650-1664_Percentage&quot; DESC;</sql><sql name="SQL 12">SELECT 
    L.label AS location_name, 
    L.country, 
    L.latitude, 
    L.longitude, 
    COUNT(CASE WHEN P.role = 'soldier' THEN P.person_id END) AS number_of_soldiers,
    COUNT(CASE WHEN P.role = 'sailor' OR P.role IS NULL THEN P.person_id END) AS number_of_sailors,
    COUNT(CASE WHEN P.role IN ('soldier', 'sailor') OR P.role IS NULL THEN P.person_id END) AS total_count
FROM 
    Persons P
JOIN 
    Locations L ON P.location_standardized = L.location_id
JOIN 
    Transactions T ON P.person_id = T.sailor_id  -- Assuming Transactions links persons to dates
JOIN 
    Deeds D ON T.deed_id = D.deed_id
WHERE 
    L.latitude IS NOT NULL 
    AND L.longitude IS NOT NULL
    AND strftime('%Y', D.deed_date) &gt;= '1650'
GROUP BY 
    L.location_id, L.label, L.country, L.latitude, L.longitude
ORDER BY 
    total_count DESC;</sql><sql name="SQL 13">CREATE INDEX idx_persons_location_standardized ON Persons(location_standardized);
CREATE INDEX idx_locations_location_id ON Locations(location_id);
CREATE INDEX idx_locations_lat_long ON Locations(latitude, longitude);
CREATE INDEX idx_persons_role ON Persons(role);
CREATE INDEX idx_persons_location_role ON Persons(location_standardized, role);</sql><sql name="SQL 14">SELECT 
    P.name, P.role
FROM 
    Persons P
JOIN 
    Locations L ON P.location_standardized = L.location_id
WHERE l.location_id = 216

</sql><sql name="SQL 15">-- Index on role for Persons (since we frequently filter on role)
CREATE INDEX IF NOT EXISTS idx_persons_role 
    ON Persons (role);

-- Index on sailor_id in Transactions (since we join T.sailor_id = P.person_id)
CREATE INDEX IF NOT EXISTS idx_transactions_sailor 
    ON Transactions (sailor_id);

-- Index on deed_id in Transactions (since we join T.deed_id = Deeds.deed_id)
CREATE INDEX IF NOT EXISTS idx_transactions_deed
    ON Transactions (deed_id);

-- Index on voyage_id in Transactions (since we join T.voyage_id = Voyages.voyage_id)
CREATE INDEX IF NOT EXISTS idx_transactions_voyage
    ON Transactions (voyage_id);

-- Index on location_standardized in Persons (since we join on P.location_standardized = L.location_id)
CREATE INDEX IF NOT EXISTS idx_persons_location_standardized
    ON Persons (location_standardized);
</sql><current_tab id="13"/></tab_sql></sqlb_project>
